name: NetworkManager • wolfSSL / GnuTLS CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  nm-wolfssl-gnutls:
    runs-on: ubuntu-22.04
    container:
      image: debian:bookworm
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        nm_version: [ master, "1.52.0", "1.42.4" ]

    steps:
    # ────────────────────────── checkout + packages ─────────────────────────
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install build dependencies
      run: |
        apt-get update -qq
        apt-get install --yes --no-install-recommends \
          autoconf automake libtool m4 pkg-config build-essential git \
          meson ninja-build gettext clang gperf gnulib autopoint gtk-doc-tools \
          nettle-dev libtasn1-bin libtasn1-6-dev libunistring-dev libnvme-dev \
          libp11-kit-dev libunbound-dev bison python3-yaml \
          debhelper debugedit dh-autoreconf dh-strip-nondeterminism dwz intltool \
          libbluetooth-dev libdebhelper-perl libndp-dev \
          libfile-stripnondeterminism-perl libglib2.0-doc \
          libnewt-dev libnl-3-dev libnl-cli-3-200 libnl-nf-3-200 libgirepository1.0-dev \
          libpolkit-agent-1-dev libslang2-dev libsub-override-perl libdbus-1-dev ppp ppp-dev mobile-broadband-provider-info \
          libteam-dev libteam5 libyaml-perl po-debconf libaudit-dev libudev-dev libsystemd-dev libmm-glib-dev libjansson-dev dhcpcd5 dnsmasq-base libpsl-dev libreadline-dev valac sudo git wget

    # ──────────────────────── cache the tool-chain ─────────────────────────
    - name: Restore cached gnutls-wolfssl
      id: cache-gnutls
      uses: actions/cache@v4
      with:
        path: |
          /opt/gnutls
          /opt/wolfssl
          /opt/wolfssl-gnutls-wrapper
        key: gnutls-wolfssl-${{ runner.os }}-${{ hashFiles('setup.sh', 'wolfssl-gnutls-wrapper/**', 'wolfssl/**', 'gnutls/**') }}
        restore-keys: |
          gnutls-wolfssl-${{ runner.os }}-

    # ───────────────── build the forked GnuTLS stack (if needed) ───────────
    - name: Build forked GnuTLS stack
      if: steps.cache-gnutls.outputs.cache-hit != 'true'
      run: |
        LOGGING=0 GNUTLS_INSTALL=/opt/gnutls WOLFSSL_INSTALL=/opt/wolfssl ./setup.sh
        test -d /opt/gnutls && test -d /opt/wolfssl

    # ───────────────────────────── curl build ──────────────────────────────
    - name: Build curl 7.88.1 (GnuTLS backend)
      run: |
        git clone --branch curl-7_88_1 https://github.com/curl/curl
        cd curl
        autoreconf -fi
        ./configure --with-gnutls=/opt/gnutls --prefix=/opt/curl \
                    --disable-static --enable-shared
        make -j"$(nproc)"
        sudo make install
        sudo ldconfig

    # ────────────────────── NetworkManager build & test ────────────────────
    - name: Clone NetworkManager ${{ matrix.nm_version }}
      run: |
        git clone https://github.com/NetworkManager/NetworkManager
        cd NetworkManager
        if [ "${{ matrix.nm_version }}" != "master" ]; then
          git checkout "${{ matrix.nm_version }}"
        fi

    - name: Configure & build NetworkManager
      working-directory: NetworkManager
      run: |
        export PKG_CONFIG_PATH="/opt/gnutls/lib/pkgconfig:/opt/curl/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
        export CPPFLAGS="-I/opt/gnutls/include -I/opt/curl/include${CPPFLAGS:+ $CPPFLAGS}"
        export LDFLAGS="-L/opt/gnutls/lib -L/opt/curl/lib -Wl,-rpath,/opt/gnutls/lib:/opt/curl/lib${LDFLAGS:+ $LDFLAGS}"
        export LD_LIBRARY_PATH="/opt/gnutls/lib:/opt/curl/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

        if [ "${{ matrix.nm_version }}" != "master" ]; then
          meson setup build-gnutls \
            -Dcrypto=gnutls \
            -Dtests=yes \
            -Dsystemd_journal=true \
            -Dmore_logging=true \
            -Dqt=false
        else
          meson setup build-gnutls \
            -Dcrypto=gnutls \
            -Dtests=yes \
            -Dsystemd_journal=true \
            -Dmore_logging=true \
            -Dqt=false \
            -Dnbft=false
        fi

        ninja -C build-gnutls -j"$(nproc)"

    # ───────────────────── verify linkage (before tests) ────────────────────
    - name: Verify linkage to /opt/gnutls
      working-directory: NetworkManager/build-gnutls
      run: |
        BIN=src/nmcli/nmcli
        LIB=$(find src/libnm-client-impl -name 'libnm.so*' -type f | head -n1)
        for obj in "$BIN" "$LIB"; do
          echo "::group::ldd $obj"
          ldd "$obj" | grep -E 'lib(curl|gnutls)'
          echo "::endgroup::"
          ldd "$obj" | grep -q '/opt/gnutls/lib/libgnutls.so.30' || exit 1
        done

    # ────────────────────────── run test-suite ──────────────────────────────
    - name: Run NetworkManager tests
      working-directory: NetworkManager
      run: |
        export PKG_CONFIG_PATH="/opt/gnutls/lib/pkgconfig:/opt/curl/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
        export CPPFLAGS="-I/opt/gnutls/include -I/opt/curl/include${CPPFLAGS:+ $CPPFLAGS}"
        export LDFLAGS="-L/opt/gnutls/lib -L/opt/curl/lib -Wl,-rpath,/opt/gnutls/lib:/opt/curl/lib${LDFLAGS:+ $LDFLAGS}"
        export LD_LIBRARY_PATH="/opt/gnutls/lib:/opt/curl/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
        export NM_TEST_REGENERATE=1

        if [ "${{ matrix.nm_version }}" != "1.42.4" ]; then
          ninja -C build-gnutls test
        else
       # Skipped on CI because the GitHub Actions kernel lacks the VRF/Team modules and QoS-mapping support that platform/test-link-linux expects, so the test aborts with “Unknown device type / xgress QoS mapping assertion.
       # Doesn't test any TLS/Crypto capabilities.
          cd build-gnutls
          all_tests=$(meson test --list 2>/dev/null)
          test_list=$(printf '%s\n' "$all_tests" \
            | grep -v -E '^(platform/test-link-linux)$' \
            | tr '\n' ' ')
          meson test $test_list --print-errorlogs
        fi
