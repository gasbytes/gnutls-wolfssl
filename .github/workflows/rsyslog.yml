name: rsyslog Test

# START OF COMMON SECTION
on:
  push:
    branches: [ 'master', 'main', 'release/**' ]
  pull_request:
    branches: [ '*' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
# END OF COMMON SECTION

jobs:
  build_gnutls:
    name: Build wolfSSL, GnuTLS and provider
    timeout-minutes: 40
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        rsyslog_ref: [ 'main', 'v8.2302.0' ]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout gnutls-wolfssl repository
        uses: actions/checkout@v4

      - name: Ensure make available (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install GnuTLS dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y gnulib autopoint gperf gtk-doc-tools nettle-dev clang libtasn1-bin libtasn1-6-dev libunistring-dev libp11-kit-dev libunbound-dev

      - name: Install rsyslog dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y build-essential pkg-config libestr-dev libfastjson-dev zlib1g-dev uuid-dev libhiredis-dev uuid-dev flex bison
          sudo apt-get install -y libdbi-dev libmysqlclient-dev postgresql-client libpq-dev libnet-dev librdkafka-dev libpcre3-dev libtokyocabinet-dev libglib2.0-dev libmongo-client-dev
          sudo apt-get install -y libcurl4-gnutls-dev
          sudo pip install docutils

      - name: Install build and test dependencies (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y autoconf libtool valgrind

      # Restore (and later save) the compiled tool-chain if it already exists
      - name: Restore cached gnutls-wolfssl
        id: cache-gnutls
        uses: actions/cache@v4
        with:
          path: |
            /opt/gnutls
            /opt/wolfssl
            /opt/wolfssl-gnutls-wrapper
          key: gnutls-wolfssl-${{ runner.os }}-${{ hashFiles('setup.sh', 'wolfssl-gnutls-wrapper/**', 'wolfssl/**', 'gnutls/**') }}
          restore-keys: |
            gnutls-wolfssl-${{ runner.os }}-

      - name: Build GnuTLS with wolfSSL provider using setup.sh script
        if: steps.cache-gnutls.outputs.cache-hit != 'true'
        run: |
          echo "Running setup.sh..."
          GNUTLS_INSTALL=/opt/gnutls WOLFSSL_INSTALL=/opt/wolfssl ./setup.sh

      - name: Check setup.sh output directories
        run: |
          echo "Check for wolfSSL installation..."
          if [ ! -d /opt/wolfssl ]; then
            echo "/opt/wolfssl not found after setup"
            exit 1
          fi
          echo "Check for GnuTLS installation..."
          if [ ! -d /opt/gnutls ]; then
            echo "/opt/gnutls not found after setup"
            exit 1
          fi
          echo "Check for wrapper installation..."
          if [ ! -d /opt/wolfssl-gnutls-wrapper/lib ]; then
            echo "/opt/wolfssl-gnutls-wrapper/lib not found after setup"
            exit 1
          fi

      - name: Build rsyslog at ${{ matrix.rsyslog_ref }}
        uses: actions/checkout@v4
        with:
          repository: rsyslog/rsyslog
          ref: ${{ matrix.rsyslog_ref }}
          path: rsyslog

      - name: Configure rsyslog
        working-directory: rsyslog
        run: |
          ./autogen.sh --enable-gnutls --disable-libgcrypt --enable-testbench --enable-imdiag --enable-omstdout PKG_CONFIG_PATH=/opt/gnutls/lib/pkgconfig

      - name: Make rsyslog
        working-directory: rsyslog
        run: |
          make -j $(nproc)

      - name: Test rsyslog
        working-directory: rsyslog
        if: ${{ matrix.rsyslog_ref == 'main' }}
        continue-on-error: true
        run: |
          cat <<EOF >> tests/valgrind.supp
          {
             pselect_cancel
             Memcheck:Param
             pselect6(sig)
             ...
             fun:pselect64_syscall
             fun:pselect
             ...
          }
          {
             pselect_cancel_2
             Memcheck:Param
             pselect6(sig)
             fun:pselect64_syscall
             fun:pselect
             ...
          }
          {
             init_leak_malloc
             Memcheck:Leak
             match-leak-kinds: definite
             fun:malloc
             obj:*
             obj:*
             obj:*
             obj:*
             obj:*
             fun:call_init.part.0
             fun:call_init
             fun:_dl_init
             fun:_dl_catch_exception
             fun:dl_open_worker
             fun:dl_open_worker
             fun:_dl_catch_exception
             fun:_dl_open
          }
          {
             init_leak_calloc
             Memcheck:Leak
             match-leak-kinds: definite
             fun:calloc
             obj:*
             obj:*
             obj:*
             obj:*
             obj:*
             obj:*
             obj:*
             fun:call_init.part.0
             fun:call_init
             fun:_dl_init
             fun:_dl_catch_exception
             fun:dl_open_worker
             fun:dl_open_worker
          }
          EOF
          export VALGRIND_OPTS=--suppressions=valgrind.supp
          export LD_LIBRARY_PATH=/opt/gnutls/lib:/opt/wolfssl/lib:/opt/wolfssl-gnutls-wrapper/lib
          make check 2>&1 | tee test.log
          awk '/^FAIL:/ {gsub(/\.sh$/, ".log", $2); print "==== " $2 " ===="; system("cat tests/" $2 "\n")}' test.log
          echo "Check for failures"
          EC=0
          grep '^FAIL:' test.log && EC=1
          exit $EC

